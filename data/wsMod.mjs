import*as uicMod from"./uicMod.mjs";import*as cfgMod from"./cfgMod.mjs";export let gateway=`ws://${window.location.hostname}:5555/ws`;export let websocket;export let debug=false;let setRelayTimeout;export async function initWebSocket(){console.log("Websocket initializing");websocket=new WebSocket(gateway);websocket.onopen=onOpen;websocket.onclose=onClose;websocket.onmessage=onMessage}async function onOpen(e){await requestMCUTime();await requestMCUAutoEnable();await requestMCUStatus();await requestMCUTimingConfig();setTimeout(uicMod.refreshAllElements,1e3)}function onClose(e){setTimeout(initWebSocket,500)}function onMessage(e){let t=JSON.parse(e.data);let o=t["type"];if(debug){console.log(t)}if(o=="time"){cfgMod.saveDateTime(t);uicMod.refreshDateDisplay(cfgMod.getDateTime())}else if(o=="status"){cfgMod.saveStatus(t);uicMod.refreshRelayDisplay(cfgMod.getRelayStatus())}else if(o=="auto_enable"){cfgMod.saveAutoEnable(t)}else if(o=="settings"){cfgMod.saveTimingConfig(t)}}export async function requestMCUTime(){let e={type:"time"};try{await websocket.send(JSON.stringify(e))}catch(e){console.log("requestMCUTime - failed to connect to websockets")}}export async function requestMCUAutoEnable(){let e={type:"auto_enable"};try{await websocket.send(JSON.stringify(e))}catch(e){console.log("requestAutoEnable - failed to connect to websockets")}}export async function requestMCUStatus(){let e={type:"status"};try{await websocket.send(JSON.stringify(e))}catch(e){console.log("requestMCUStatus - failed to connect to websockets");console.log(e)}}export async function requestMCUTimingConfig(){let e={type:"settings"};try{await websocket.send(JSON.stringify(e))}catch(e){console.log("requestMCUTimingConfig - failed to connect to websockets")}}export async function setMCUDateTime(e){let t={type:"chg_time",year:e.getFullYear(),month:e.getMonth()+1,day:e.getDate(),hour:e.getHours(),minute:e.getMinutes(),second:e.getSeconds()};if(debug){console.log(t)}try{await websocket.send(JSON.stringify(t))}catch(e){console.log("setMCUDateTime - failed to connect to websockets")}}export async function setMCUAutoEnable(e){let t={type:"chg_auto_enable",auto_enabled:e};try{await websocket.send(JSON.stringify(t))}catch(e){console.log("setMCUAutoEnable - failed to connect to websockets")}}export async function setMCUTimingConfig(e){let t={type:"chg_settings",timeslots:e.timeslots,duration:e.duration,gmt_offset:e.gmt_offset,use_ntp:e.use_ntp};try{await websocket.send(JSON.stringify(t))}catch(e){console.log("setMCUSettings - failed to connect to websockets")}}export async function setMCURelay(e,t=1){let o={type:"relay",relay_status:e};if(debug){console.log(o)}try{await websocket.send(JSON.stringify(o));if(e){setRelayTimeout=setTimeout(setMCURelay,t*1e3,false)}else{clearTimeout(setRelayTimeout)}}catch(e){console.log("setMCURelay - failed to connect to websockets")}}